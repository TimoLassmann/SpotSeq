#+TITLE:  Standard Challenge Benchmark
#+AUTHOR: Timo Lassmann
#+EMAIL:  timo.lassmann@telethonkids.org.au
#+DATE:   2018-12-25
#+LATEX_CLASS: report
#+OPTIONS:  toc:nil
#+OPTIONS: H:4
#+LATEX_CMD: pdflatex
* Introduction 
  Here I test wims's ability to detect motifs embedded in random nucleotide sequences. The suite runs the following steps:
  1) generate test sequences using =tfbs_bench=
  2) generate infinite hidden Markov model using =wims_model= 
  3) score test and negative sequences using =wims_score= 
  4) generate AUC scores using the Rscript =makeROC.R=
  5) summarise and plot scores from multiple runs. 
* Preliminaries 

  This file contains all the code to run the benchmark. To get started copy this file into a benchmark directory: 

  #+BEGIN_EXAMPLE sh -n 
  BENCHDIR="$HOME/benchmarks/wims_TFBS/"
  mkdir -p $BENCHDIR
  cp Standard_challenge_benchmark.org $BENCHDIR
  cd $BENCHDIR
  #+END_EXAMPLE


  Open the file in Emacs and tangle with =C+c C+v t=.

  Alternatively running this on the command line should work: 

  #+BEGIN_EXAMPLE sh -n 
  emacs -Q --batch \
    --eval "(progn
    (require 'org)(require 'ob)(require 'ob-tangle)
    (setq org-src-preserve-indentation t)
    (mapc (lambda (file)
    (find-file (expand-file-name file \".\"))
    (org-babel-tangle)
    (kill-buffer)) '(\"Standard_challenge_benchmark.org\")))" 2>&1 |grep -i tangled
  #+END_EXAMPLE

   A makefile will appear 

* Dependencies 

  This test suite depends on:
  1) Gnu Parallel supercite:tange-2011-gnu-paral
  2) R supercite:team-2018-r 
  3) wims ( https://github.com/TimoLassmann/wims.git)

* Setting the RNG seed globally

  This code block sets a seed globally to be used in both generating the test data sets and in wims itself.
  #+NAME: randomseed
  #+BEGIN_SRC sh -n :exports code :results none :noweb yes
    SEED=3
  #+END_SRC

  Ha! not 42. 

* Generating the test data sets 

  This bash script will generate the test datasets: 

  #+BEGIN_SRC bash -n :tangle gen_test_datasets.sh :shebang #!/usr/bin/env bash :noweb yes
    DIR=`pwd`
    OUTDIR=
    SAMPLES=10
    BENCHTYPE=

    function usage()
    {

        printf "This script will generate test data sets.\n\n" ;
        printf "usage: $0 -o <output directory> -s <samples (default 10)> -t < tfbs | comp >\n\n" ;
        exit 1;
    }

    while getopts o:s:t:  opt
    do
        case ${opt} in
            o) OUTDIR=${OPTARG};;
            s) SAMPLES=${OPTARG};;
            t) BENCHTYPE=${OPTARG};;
            ,*) usage;;
        esac
    done
    if [ "${OUTDIR}" == "" ]; then usage; fi
    if [ "${SAMPLES}" -lt 1 ]; then usage; fi
  #+END_SRC
  Add in the random number seed;
  #+BEGIN_SRC bash -n :tangle gen_test_datasets.sh :shebang #!/usr/bin/env sh :noweb yes
    <<randomseed>>
  #+END_SRC

  #+BEGIN_SRC bash -n :tangle gen_test_datasets.sh :shebang #!/usr/bin/env sh :noweb yes

    shopt -s nullglob
    EXISTINGFILES=($OUTDIR*fa) 

    for file in ${EXISTINGFILES[*]}; do
        echo $file;
    done
    if [ "${#EXISTINGFILES[@]}" -gt 0 ]; then 
        printf "\nERROR: The output directory $OUTDIR contains fasta files (see above).\n\n" ;
        printf "Remove these first!\n\n" ;
        exit 1;
    fi

    printf "Using RNG seed: %d \n" $SEED;
    if [ "${BENCHTYPE}" == "tfbs" ]; then 
        errors=($(seq 0 1 5))

        for i in $(seq 1 1 $SAMPLES)
        do
            printf "Generating sample %s\n", $i;
            for error in ${errors[*]}
            do
                echo "tfbs_bench -o $OUTDIR -e $error -s $SEED"
                tfbs_bench -o $OUTDIR -e $error -s $SEED
                SEED=$((SEED+1))
            done
        done
    fi

    if [ "${BENCHTYPE}" == "comp" ]; then 
        for i in $(seq 1 1 $SAMPLES)
        do
            printf "Generating sample %s\n", $i;
            for mix in $(seq 0.0 0.1 1.0)
            do
                echo "composition_bench -o $OUTDIR -m $mix -s $SEED -r $i"
                composition_bench -o $OUTDIR -m $mix -s $SEED -r $i
                SEED=$((SEED+1))
            done
        done
    fi

  #+END_SRC

* Run wims model


  #+BEGIN_SRC bash -n :tangle run_wims_model.sh :shebang #!/usr/bin/env bash :noweb yes
    DIR=`pwd`
    OUTDIR=
    SAMPLES=10
    AVAILABLECORES=8
    JOBS=1
    function usage()
    {

        printf "This script will run wims_model in parallel on all train_*>.fa files in a target directory.\n\n" ;
        printf "usage: $0 -o <target input directory> -c <available cores (default 8)>\n\n" ;
        exit 1;
    }

    while getopts o:c:  opt
    do
        case ${opt} in
            o) OUTDIR=${OPTARG};;
            c) AVAILABLECORES=${OPTARG};;
            ,*) usage;;
        esac
    done
    if [ "${OUTDIR}" == "" ]; then usage; fi
    if [ "${AVAILABLECORES}" -lt 1 ]; then usage; fi

    OUTDIR=${OUTDIR%/}
    shopt -s nullglob
    EXISTINGFILES=($OUTDIR/train_*fa) 

    if [ "${#EXISTINGFILES[@]}" -lt 1 ]; then
        printf "\nInput directory contains no input files matching train_*.fa\n\n";
        exit 1;
    fi

    let JOBS="$AVAILABLECORES / 8" 

    if [ "$JOBS" -lt 1 ]; then
        JOBS=1
    fi
  #+END_SRC


  #+BEGIN_SRC bash -n :tangle run_wims_model.sh :shebang #!/usr/bin/env bash :noweb yes
    <<randomseed>>
  #+END_SRC

  #+BEGIN_SRC bash -n :tangle run_wims_model.sh :shebang #!/usr/bin/env bash :noweb yes
    printf "Will process %s jobs in parallel, each using %s cores.\n"  $JOBS 8;

    echo "find $OUTDIR -name train_*.fa | parallel --jobs $JOBS \"wims_model -i {} -o {}.h5 --nthreads 8 --niter 10000 --states 100 --seed $SEED\"";
    find $OUTDIR -name "train_*.fa" | parallel --jobs $JOBS "wims_model -i {} -o {}.h5 --nthreads 8 --niter 10000 --states 100 --seed $SEED"

  #+END_SRC 

* Run wims score & AUC calculation


  #+BEGIN_SRC bash -n :tangle run_wims_score.sh :shebang #!/usr/bin/env bash :noweb yes
    DIR=`pwd`
    OUTDIR=
    SAMPLES=10
    AVAILABLECORES=8
    JOBS=1
    SUMMARY=
    function usage()
    {

        printf "This script will run wims_score in parallel using all train_*>.h5 model files in a target directory.\n\n" ;
        printf "usage: $0 -o <target input directory> -c <available cores (default 8)> -s <summary.txt> \n\n" ;
        exit 1;
    }

    while getopts o:c:s:  opt
    do
        case ${opt} in
            o) OUTDIR=${OPTARG};;
            s) SUMMARY=${OPTARG};;
            c) AVAILABLECORES=${OPTARG};;
            ,*) usage;;
        esac
    done
    if [ "${OUTDIR}" == "" ]; then usage; fi
    if [ "${AVAILABLECORES}" -lt 1 ]; then usage; fi
    function rename ()
    {
        curl -s -o /dev/null -w "%{http_code}" $url
    }


    OUTDIR=${OUTDIR%/}
    shopt -s nullglob
    MODELFILES=($OUTDIR/train_*h5) 

    if [ "${#MODELFILES[@]}" -lt 1 ]; then
        printf "\nInput directory contains no input files matching *.h5\n\n";
        exit 1;
    fi

    let JOBS="$AVAILABLECORES / 8" 

    if [ "$JOBS" -lt 1 ]; then
        JOBS=1
    fi

    echo ${#MODELFILES[@]}

    echo ${MODELFILES[*]}
    echo ${!MODELFILES[*]}
    printf "" > "wims_commands.txt"
    printf "" > "makeROC_commands.txt"
    TESTFILES=$(sed "s/train_/test_/g" <<< ${MODELFILES[*]})
    TESTFILES=$(sed "s/.fa.h5/.fa/g" <<< ${TESTFILES[*]})
    TESTFILES=(${TESTFILES//:/ })
    NEGFILES=$(sed "s/train_/neg_/g" <<< ${MODELFILES[*]})
    NEGFILES=$(sed "s/.fa.h5/.fa/g" <<< ${NEGFILES[*]})
    NEGFILES=(${NEGFILES//:/ })

    for index in "${!MODELFILES[@]}"
    do
        echo ${MODELFILES[$index]} ${TESTFILES[$index]} ${NEGFILES[$index]}
        printf "wims_score -m %s -i %s -b %s -o %s_pos.csv\n" ${MODELFILES[$index]} ${TESTFILES[$index]} ${NEGFILES[$index]} ${MODELFILES[$index]} >> "wims_commands.txt"
        printf "wims_score -m %s -i %s -b %s -o %s_neg.csv\n\n" ${MODELFILES[$index]} ${NEGFILES[$index]} ${TESTFILES[$index]} ${MODELFILES[$index]}  >> "wims_commands.txt"

        ERROR=$(echo ${MODELFILES[$index]} | awk '{x = split($1,a,"_"); gsub(".fa.h5","",a[x]); gsub("k","",a[x]); print a[x]}')
    
        printf "./makeROC.R -p %s_pos.csv -n %s_neg.csv -e %s -k %s -s %s \n" ${MODELFILES[$index]} ${MODELFILES[$index]} ${MODELFILES[$index]}  $ERROR $SUMMARY   >> "makeROC_commands.txt"

    done


    printf "Will process %s jobs in parallel, each using %s cores.\n"  $JOBS 8;
    parallel --jobs 1 < wims_commands.txt
    parallel --jobs $JOBS < makeROC_commands.txt


    #+END_SRC 

* Plotting and summary statistics 

** Main plotting script

The script below takes log-odds scores from positive and negative test sequences, draws an area under receiver operating characteristic curve (ROC) and writes output to file. The script also plots the curves (use -d dark versions I prefer to use in presentations.

   #+BEGIN_SRC R -n :tangle makeROC.R :shebang #!/usr/bin/env Rscript :noweb yes
     library(optparse)
     sessionInfo()
     dark <- FALSE;
     error <- 0;
     option_list = list(
         make_option(c("-p", "--positive"),
                     type="character",
                     default=NULL,
                     help="scores for positive test sequences.",
                     metavar="character"),
         make_option(c("-n", "--negative"),
                     type="character",
                     default=NULL,
                     help="scores for the negative test sequences.",
                     metavar="character"),
         make_option(c("-e", "--experimentname"),
                     type="character",
                     default=NULL,
                     help="Experiment name.",
                     metavar="character"),
         make_option(c("-s", "--summary"),
                     type="character",
                     default="stats.csv",
                     help="Summary stats file name [stats.csv].",
                     metavar="character"),
         make_option(c("-k", "--error"),
                     type="integer",
                     default=0,
                     help="Errors.",
                     metavar="character"),
         make_option(c("-d", "--dark"), action="store_true", default=FALSE,
                     help="use dark theme (for presentations)")


     );

     opt_parser <- OptionParser(option_list=option_list,
                                description = "\nLoad singleR object and make plots.",
                                epilogue = "Example:\n\n  Blah  \n\n");
     opt <- parse_args(opt_parser);

     if(opt$dark){
         dark <- TRUE
     }

     error <-  opt$error;

    summaryfilename <- opt$summary

     if (is.null(opt$positive)){
         print_help(opt_parser)
         stop("Missing infile!\n", call.=FALSE)
     }
     if (is.null(opt$negative)){
         print_help(opt_parser)
         stop("Missing infile!\n", call.=FALSE)
     }

     posname <- opt$positive
     negname <- opt$negative
     name <- opt$experimentname
     pos = read.csv(posname,header = T,row.names= 1)
     neg = read.csv(negname,header = T,row.names= 1)


     <<Rlibraries>>

     response = c(rep(1,dim(pos)[1]), rep(0,dim(neg)[1]))
     predictor = c(pos[,1],neg[,1])

                                             #roc = roc(response,predictor)

     x = cbind(response,predictor)
     x = as.data.frame(x)


     if(dark){
         p = ggplot(x , aes(d = response, m = predictor))
         p <- op +  geom_roc(labels = FALSE,
                             fill=rgb(0,0,20,maxColorValue = 255),
                             color=rgb(220,210,200,maxColorValue = 255))

         p <- p + geom_abline(intercept = 0, slope = 1, color=rgb(220,210,200,maxColorValue = 255))
         p <- p +scale_x_continuous(limits = c(0,1), expand = c(0, 0))
         p <- p + scale_y_continuous(limits = c(0,1), expand = c(0, 0))

         p <- p + annotate("text",
                           color=rgb(220,210,200,maxColorValue = 255),
                           x = .75,
                           y = .25,
                           label = paste("AUC =", round(calc_auc(p)$AUC, 4)))
         p  <-  p + xlab("1-Specificity (FPR)")
         p  <-  p + ylab("Sensitivity (TPR)")

         p <- p + theme_classic()
         p <- p + theme(panel.background = element_rect(fill =rgb(0,0,20,maxColorValue = 255),colour = rgb(0,0,20,maxColorValue = 255)),
                        text = element_text(colour=rgb(220,210,200,maxColorValue = 255)),
                        rect = element_rect(fill = rgb(0,0,20,maxColorValue = 255),colour=rgb(0,0,20,maxColorValue = 255)),
                        line = element_line(colour =rgb(220,210,200,maxColorValue = 255)),
                        axis.text = element_text(colour =rgb(220,210,200,maxColorValue = 255)),
                        axis.line = element_line(colour =rgb(220,210,200,maxColorValue = 255)),
                        axis.ticks = element_line(colour = rgb(220,210,200,maxColorValue = 255)),
                        )
     }else{
         p = ggplot(x , aes(d = response, m = predictor)) + geom_roc(labels = FALSE)

         p <- p + geom_abline(intercept = 0, slope = 1)
         p <- p +scale_x_continuous(limits = c(0,1), expand = c(0, 0))
         p <- p + scale_y_continuous(limits = c(0,1), expand = c(0, 0))

         p <- p + annotate("text",
                           x = .75,
                           y = .25,
                           label = paste("AUC =", round(calc_auc(p)$AUC, 4)))
         p  <-  p + xlab("1-Specificity (FPR)")
         p  <-  p + ylab("Sensitivity (TPR)")
     }
     metadata <- tribble(~name,~error, ~AUC,
                         paste0(basename(name)), error, round(calc_auc(p)$AUC, 4))

     metadata
     if(!file.exists(summaryfilename)){
         write_csv(metadata, summaryfilename,  na = "NA", append = TRUE, col_names = TRUE)
     }else{
         write_csv(metadata, summaryfilename, na = "NA", append = TRUE, col_names = FALSE)
     }

     outname = paste0("ROC_",basename(name),".jpg");
     jpeg(outname,width = 480, height = 480, units = "px", pointsize = 12,     quality = 90)

     p




     dev.off()
     #options(tikzDocumentDeclaration = '\\documentclass{beamer}')
     #outname = paste0("ROC_",basename(name),".tex");
     #tikz(outname,width = 2, height = 2)

     #dev.off()

   #+END_SRC





** Code to make summary figures 
   1) Composition test.

   #+BEGIN_SRC R -n 
     library(tidyverse)
     dat= read_csv("results_comp.csv") 
     class(dat[[2]])<-"character"
     dat$error <- factor(dat$error, levels = c(0,10,20,30,40,50,60,70,80,90,100) )
     p <- ggplot(dat,aes(x = error, y = AUC)) + geom_boxplot()+ geom_jitter(width = 0.2) + scale_y_continuous(limits = c(0.4,1.0))
     outname = "Composition_test_figure.jpg"
     jpeg(outname,width = 480, height = 480, units = "px", pointsize = 12,     quality = 90)
     p
     dev.off()
   #+END_SRC

   2) TFBS test 
   #+BEGIN_SRC R -n 
     library(tidyverse)
     dat= read_csv("results_tfbs.csv") 

     class(dat[[2]])<-"character"
     p <- ggplot(dat,aes(x = error, y = AUC)) + geom_boxplot()+ geom_jitter(width = 0.2)

     p <- p + scale_y_continuous(breaks=seq(0.4,1.0,0.1))
     p<- p + xlab("Number of mutations in planted site") 

     p <- p + theme(axis.text=element_text(size=12), axis.title=element_text(size=18,face="bold"))
ggsave(
  "TFBS_test_figure.jpg",
  p,
  width = 8,
  height = 6,
  dpi = 1200
)

     outname = "TFBS_test_figure.jpg"
     jpeg(outname,width = 720, height = 480, units = "px", pointsize = 12,     quality = 90)
     p
     dev.off()

   #+END_SRC
   dat$error <- factor(dat$error, levels = c(0,10,20,30,40,50,60,70,80,90,100) )


* Sanity checks and convenience scripts

** Check for wims installation

   #+BEGIN_SRC bash -n :tangle check_for_programs.sh :shebang #!/usr/bin/env bash
     programs=(Rscript parallel pkg-config wims_model wims_score tfbs_bench)

     printf "Running Sanity checks:\n";

     for item in ${programs[*]}
     do
         if which $item >/dev/null; then
             printf "%15s found.\n"  $item;
         else
             printf "\nERROR: %s not found!\n\n" $item;
             exit 1;
         fi
     done
   #+END_SRC

** Check for libraries 
   
   Here I define the list of libraries I'll be using. 
   
   #+NAME: liblist
   #+BEGIN_SRC R -n :exports code :results none
     libraries <- c("devtools","optparse","tidyverse","plotROC")
   #+END_SRC
   
   Script to test if libraries are present.
   #+BEGIN_SRC R -n :tangle test_for_libraries.R :shebang #!/usr/bin/env Rscript :noweb yes :exports code :results none
     <<liblist>>
     Sys.info()["nodename"]
     for(library in libraries) 
     { 
         f = is.element(library, installed.packages()[,1])
         print(paste("Library",library, "is installed?", f))
         if(!f)
         {
             message("Missing library:",library )
             quit(status=1)
         }
     }
     quit(status=0)
   #+END_SRC
   
   
   #+BEGIN_SRC sh -n :results output :exports both
     ./test_for_libraries.R
   #+END_SRC
   install.packages("tidyverse")
   Code block to load the libraries in R code.

   #+NAME: Rlibraries
   #+BEGIN_SRC R -n :exports code :results none :noweb yes
     <<liblist>>
     lapply(libraries, FUN = function(X) {
         do.call("library", list(X)) 
     })

   #+END_SRC

** Makefile to kick off the analysis

   1) Makefile 

   #+BEGIN_SRC makefile -n :tangle Makefile
     check: check_r_libs 
     @ echo Done


     tfbs: 
     @ ./gen_test_datasets.sh -o tfbs_test -s 10 -t tfbs
     @ ./run_wims_model.sh  -o tfbs_test -c 128
     @ ./run_wims_score.sh  -o  tfbs_test -c 128 -s results_tfbs.csv

     comp: 
     @ ./gen_test_datasets.sh -o comp_test -s 10 -t comp
     @ ./run_wims_model.sh  -o comp_test -c 128
     @ ./run_wims_score.sh  -o  comp_test -c 128 -s results_comp.csv


     tangle:
     ./tangleorgs.sh Standard_challenge_benchmark.org

     check_r_libs: check_programs
     @ $$(pwd)/test_for_libraries.R
     @ if [ $$? -ne 0 ]; then exit; fi;
     @ echo R libs found 

     check_programs:  tangle
     @ $$(pwd)/check_for_programs.sh
     @ if [ $$? -ne 0 ]; then exit; fi;
     @ echo Programs found

   #+END_SRC

** script to tangle analysis org documents from command line

   #+BEGIN_SRC bash -n :tangle tangleorgs.sh :tangle-mode (identity #o700) :shebang #!/usr/bin/env bash
     #
     # tangle files with org-mode
     #
     DIR=`pwd`
     FILES=""

     function usage()
     {
         cat <<EOF

     This script will:

     1) tangle the input file 

     usage: $0   <a.org> <b.org> ...
     EOF
         exit 1;
     }

     while getopts i:  opt
     do
         case ${opt} in
             i) INDIR=${OPTARG};;
             ,*) usage;;
         esac
     done

     # wrap each argument in the code required to call tangle on it
     for i in $@; do
         FILES="$FILES \"$i\""
     done

     if [ "${FILES}" = "" ]; then usage; fi

     emacs -Q --batch \
           --eval "(progn
       (require 'org)(require 'ob)(require 'ob-tangle)
       (setq org-src-preserve-indentation t)
       (mapc (lambda (file)
       (find-file (expand-file-name file \"$DIR\"))
       (org-babel-tangle)
       (kill-buffer)) '($FILES)))" 2>&1 |grep -i tangled

   #+END_SRC

* References 

  #+BEGIN_SRC latex 
    \printbibliography[heading=none]

  #+END_SRC

* Versions 
  #+BEGIN_SRC emacs-lisp -n :exports both :eval yes
    (princ (concat
            (format "Emacs version: %s\n"
                    (emacs-version))
            (format "org version: %s\n"
                    (org-version))))
  #+END_SRC

  #+RESULTS:
  : Emacs version: GNU Emacs 26.1 (build 1, x86_64-redhat-linux-gnu, GTK+ Version 3.22.30)
  :  of 2018-06-26
  : org version: 9.1.9

  #+BEGIN_SRC sh :results output :exports both :eval yes
    bash --version
  #+END_SRC


